;;**********************************************************************
;;
;; Title:       Convert.dbl
;;
;; Type:        Class
;;
;; Description: Converts a base data type to another base data type.
;;
;; Author:      Tod Phillips, Synergex Professional Services Group
;;
;; Copyright:   ©Synergex International Inc.  All rights reserved.
;;
;; WARNING:     If you were given this code by a Synergex employee then
;;              you may use and modify it freely for use within your
;;              applications.
;;
;;              However, you may not under any circumstances distribute
;;              this code, or any modified version of this code, to any
;;              third party without first obtaining written permission to
;;              do so from Synergex.  In using this code you accept that it
;;              is provided as is, and without support or warranty.
;;
;;              Neither Synergex or the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this code.  This header information must
;;              remain unaltered in the code at all times.  Possession of
;;              this code, or any modified version of this code, indicates
;;              your acceptance of these terms.
;;
;; Revision:    1.0
;;
;; Date:        11/13/2008
;;**********************************************************************

namespace SynPSG.System

    ;;;<summary>Specifies whether relevant Convert.ToBase64CharArray and
    ;;;Convert.ToBase64String methods insert line breaks in their output.
    ;;;</summary>
    public enum Base64FormattingOptions
        InsertLineBreaks
        None
    endenum

    public sealed class Convert

        ;;;<summary>Converts the value of an array of 8-bit unsigned integers
        ;;;to its equivalent String representation encoded with base 64
        ;;;digits.</summary>
        ;;;<param name=inArray>An array of 8-bit unsigned integers.</param>
        ;;;<param name=formattingOptions>InsertLineBreaks to insert a line
        ;;;break every 76 characters, or None to not insert line breaks.</param>
        ;;;<returns>string</returns>
        public static method ToBase64String     ,string
            in inArray                          ,[#]@byte
            in formattingOptions                ,Base64FormattingOptions
            endparams
.align
            stack record wrkVars
                b64ctr          ,i4
                b64LineLength   ,i4
                base64Chars     ,i4
                binVal          ,i4
                byteCtr         ,i4
                ctr             ,i4
                setsOf3         ,i4
                lastSetOf3      ,i4
                lineBreaksNeeded,i4
                mh_b64String    ,D_HANDLE
                tmpLength       ,i4
                remainingChars  ,d1
                b64CharArray    ,a65
                group bits24    ,a24
                    bits24_1    ,a6
                    bits24_2    ,a6
                    bits24_3    ,a6
                    bits24_4    ,a6
                endgroup
            endrecord

            stack record
                b64String       ,string
                tmpByte         ,@byte
            endrecord

            structure dataBlock
                ,a32768
            endstructure

            structure byteStruct
                oneByte ,a1
            endstructure

        proc
            ;; Set up the Base 64 character array, and initialize other values
            init wrkVars
            b64CharArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

            ;; Set tmpLength and make sure something was passed...
            if (tmpLength = inArray.Length)>0
            begin
                ;; Determine the length of the new memory handle which will hold our completed base 64 string
                ;; If there are remaining bits (which will be either 2 bits or 4 bits), then that will
                ;; equate to either 1 or 2 extra "Filler" characters needed at the end of the line
                setsOf3 = tmpLength/3
                remainingChars = tmpLength - (setsOf3*3)

                base64Chars = setsOf3*4
                ;; If there are remaining characters, they will be transposed into 4 base64 characters with
                ;;special "filler" alphas (the '=' sign) making up the last 1-2 characters
                if (remainingChars)
                    base64Chars += 4

                ;; if inserting line breaks, add two characters for a CRLF for each 76-characters
                if (formattingOptions==Base64FormattingOptions.InsertLineBreaks)
                    lineBreaksNeeded = base64Chars/76

                ;; Create the memory handle for our final Base64 string
                mh_b64String = %mem_proc(DM_ALLOC+DM_BLANK,base64Chars+(lineBreaksNeeded*2))

                foreach tmpByte in inArray
                begin
                    bits24((byteCtr*8)+1:8)=%bin(tmpByte,1)
                    if ((byteCtr+=1)==3)
                    begin
                        ^m(byteStruct[b64ctr+=1],mh_b64String) = b64CharArray(^b(bits24_1)+1:1)
                        ^m(byteStruct[b64ctr+=1],mh_b64String) = b64CharArray(^b(bits24_2)+1:1)
                        ^m(byteStruct[b64ctr+=1],mh_b64String) = b64CharArray(^b(bits24_3)+1:1)
                        ^m(byteStruct[b64ctr+=1],mh_b64String) = b64CharArray(^b(bits24_4)+1:1)
                        ;; Insert line break (CRLF) if necessary
                        if (formattingOptions==Base64FormattingOptions.InsertLineBreaks)
                        begin
                            if (b64LineLength+=4)==76
                            begin
                                ^m(byteStruct[b64ctr+=1],mh_b64String)=%char(13)
                                ^m(byteStruct[b64ctr+=1],mh_b64String)=%char(10)
                                init b64LineLength
                            end
                        end
                        init byteCtr
                    end
                end

                if remainingChars
                begin
                    xcall fill('0',bits24)
                    for ctr from 1 thru remainingChars
                        bits24(((ctr-1)*8)+1:8)=%bin(inArray[ctr+lastSetOf3],1)

                    ^m(byteStruct[b64ctr+=1],mh_b64String) = b64CharArray(^b(bits24_1)+1:1)
                    ^m(byteStruct[b64ctr+=1],mh_b64String) = b64CharArray(^b(bits24_2)+1:1)

                    if (remainingChars==2) then
                        ^m(byteStruct[b64ctr+=1],mh_b64String) = b64CharArray(^b(bits24_3)+1:1)
                    else
                        ^m(byteStruct[b64ctr+=1],mh_b64String) = b64CharArray(65:1)

                    ^m(byteStruct[b64ctr+=1],mh_b64String)=b64CharArray(65:1)
                end

                for ctr from 1 thru (%mem_proc(DM_GETSIZE,mh_b64String)/^size(dataBlock))
                    b64String = String.Concat(b64String,^m(dataBlock[ctr],mh_b64String))

                ;; Check for remaining characters, and if present, append to the Base64 return string
                base64Chars = %mem_proc(DM_GETSIZE,mh_b64String)-((ctr-1)*^size(dataBlock))
                if base64Chars
                    b64String = String.Concat(b64String,^m(dataBlock[ctr](1:base64Chars),mh_b64String))
                mh_b64String = %mem_proc(DM_FREE,mh_b64String)
            end

            mreturn b64String

        endmethod

        ;;;<summary>Converts the value of an alpha variable to its
        ;;;equivalent String representation encoded with base 64
        ;;;digits.</summary>
        ;;;<param name=inAlpha>An alpha variable.</param>
        ;;;<returns>string</returns>
        public static method ToBase64String     ,string
            in inAlpha                          ,a
            endparams
.align
            stack record wrkvars
                m_alphaLength   ,i4
                m_count         ,i4
                m_inBytes       ,[#]@byte
                tmpAlpha        ,a1
                tmpByte         ,byte   @tmpAlpha
            endrecord
        proc
            if (m_alphaLength=%trimz(inAlpha))
            begin
                m_inBytes = new @byte[m_alphaLength]
                for m_count from 1 thru m_alphaLength
                begin
                    tmpAlpha = inAlpha(m_count:1)
                    m_inBytes[m_count] = (@byte)(tmpByte)
                end
                mreturn ToBase64String(m_inBytes,Base64FormattingOptions.InsertLineBreaks)
            end
        endmethod

        ;;;<summary>Converts the value of an array of 8-bit unsigned integers
        ;;;to its equivalent String representation encoded with base 64
        ;;;digits.</summary>
        ;;;<param name=inArray>An array of 8-bit unsigned integers.</param>
        ;;;<returns>string</returns>
        public static method ToBase64String     ,string
            in inArray                          ,[#]@byte
            endparams
        proc
            mreturn ToBase64String(inArray,Base64FormattingOptions.InsertLineBreaks)
        endmethod

    endclass

endnamespace
